
DataFlow: Frontend::DetectJunctions* -> Frontend::InitializeNewJunctions* ->  Map::InsertMapJunction ->  Backend::MergeJunctions*
          Frontend::TrackJunctions*   ->  Frontend::SetObservationsForKeyFrame                       -> Backend::MergeJunctions*

Pose Estimation:    Frontend::TrackJunctions* -> Frontend::EstimateCurrentPose*
Bundle Adjustment:  Frontend::InsertKeyFrame  -> Backend::UpdateMap  ->  Backend::BackendLoop    ->  Backend::Optimize*

starred functions are not implemented yet.

Notes:
For successfully tracked junctions, they are not expected call InitializeNewJunctions. For feature points, this is achieved by masking out areas where tracked features exist. We need a similar proper technique for junctions.

For MergeJunctions, adding a pointer of other junctions may be needed, may consider modifying definition of junction3D and junction2D to achieve that. May also consider this problem in Detection and Initialization.

The purpose of MergeJunctions is to connect Junctions together, this may be useful for more precise Bundle Adjustment or meaningful reconstruction.

I'm going to implement and test TrackJunctions, together with DetectJunctions and InitializeNewJunctions, we can have a minimum visually working system.
